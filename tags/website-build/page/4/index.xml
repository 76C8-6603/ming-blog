<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>website build on Ming Blog</title>
    <link>http://www.mingaccount.com/tags/website-build/</link>
    <description>Recent content in website build on Ming Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Feb 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://www.mingaccount.com/tags/website-build/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>请求参数中的&#43;号为什么会丢失,如何保证参数完整</title>
      <link>http://www.mingaccount.com/2018/08/%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84-%E5%8F%B7%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E4%B8%A2%E5%A4%B1/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/08/%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84-%E5%8F%B7%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E4%B8%A2%E5%A4%B1/</guid>
      <description>最近在开发中碰见一个问题，后端代码调用接口，在请求端参数没有任何问题，但是当接口接收到参数时，其中的加号全部变为了空格。 在查阅资料后发现是U</description>
    </item>
    
    <item>
      <title>Maven package完整依赖jar包</title>
      <link>http://www.mingaccount.com/2018/07/mavenpackage%E5%AE%8C%E6%95%B4%E4%BE%9D%E8%B5%96jar%E5%8C%85/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/07/mavenpackage%E5%AE%8C%E6%95%B4%E4%BE%9D%E8%B5%96jar%E5%8C%85/</guid>
      <description>maven package生成的jar包默认是没有项目依赖的 需要导出的jar包包含项目所有的依赖，需要配置pom： &amp;lt;build&amp;gt; &amp;lt;finalName&amp;gt;yourApp&amp;lt;/finalName&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-shade-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;shadedArtifactAttached&amp;gt;true&amp;lt;/shadedArtifactAttached&amp;gt; &amp;lt;shadedClassifierName&amp;gt;jar-with-dependencies&amp;lt;/shadedClassifierName&amp;gt; &amp;lt;!-- Any name that makes sense --&amp;gt; &amp;lt;outputDirectory&amp;gt;../output/jar-with-dependencies&amp;lt;/outputDirectory&amp;gt; &amp;lt;/configuration&amp;gt;</description>
    </item>
    
    <item>
      <title>Windows删除启动盘的所有分区</title>
      <link>http://www.mingaccount.com/2018/07/windows%E5%88%A0%E9%99%A4%E5%90%AF%E5%8A%A8%E7%9B%98%E7%9A%84%E5%90%84%E7%A7%8D%E5%88%86%E5%8C%BA/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/07/windows%E5%88%A0%E9%99%A4%E5%90%AF%E5%8A%A8%E7%9B%98%E7%9A%84%E5%90%84%E7%A7%8D%E5%88%86%E5%8C%BA/</guid>
      <description>win10右键徽标-&amp;gt;Windows Powershell(管理员) dispark list disk 展示所有磁盘 select disk # 确认好所选目标磁盘，#号为id clean 删除选中磁盘</description>
    </item>
    
    <item>
      <title>[译]lambda表达式对 SAM （单个抽象方法类）type的处理方式</title>
      <link>http://www.mingaccount.com/2018/06/%E8%AF%91lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AF%B9-sam/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/06/%E8%AF%91lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AF%B9-sam/</guid>
      <description>在阅读Venkat Subramaniam的著作《Functional Programming in Java》 之后，方法模式和lambda完美结合让我印象深刻。 这种模式</description>
    </item>
    
    <item>
      <title>Npm淘宝镜像</title>
      <link>http://www.mingaccount.com/2018/06/npm%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/06/npm%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F/</guid>
      <description>npm config set registry https://registry.npm.taobao.org</description>
    </item>
    
    <item>
      <title>Java反射常用API汇总</title>
      <link>http://www.mingaccount.com/2018/06/java%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8api%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/06/java%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8api%E6%B1%87%E6%80%BB/</guid>
      <description>“JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性” 一、类对</description>
    </item>
    
    <item>
      <title>Mysql安装后root无法登陆(Access denied for user &#39;root&#39;@&#39;localhost&#39;)</title>
      <link>http://www.mingaccount.com/2018/06/mysql%E5%AE%89%E8%A3%85%E5%90%8Eroot%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86/</link>
      <pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/06/mysql%E5%AE%89%E8%A3%85%E5%90%8Eroot%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86/</guid>
      <description>复杂密码才能通过 sudo mysql -u root -p mysql&amp;gt; select user, plugin from mysql.user; mysql&amp;gt; update mysql.user set authentication_string=PASSWORD(&#39;xcvds_32GDS&#39;), plugin=&#39;mysql_native_password&#39; where user=&#39;root&#39;; mysql8.0不能用上边的语句： ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &amp;quot;svewe_123&amp;quot;;</description>
    </item>
    
    <item>
      <title>avg函数忽略null值</title>
      <link>http://www.mingaccount.com/2018/06/avg%E5%87%BD%E6%95%B0%E5%BF%BD%E7%95%A5null%E5%80%BC/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/06/avg%E5%87%BD%E6%95%B0%E5%BF%BD%E7%95%A5null%E5%80%BC/</guid>
      <description>avg函数对值为null的行，会忽略不计 解决方案 avg((coalesce(column,0))</description>
    </item>
    
    <item>
      <title>Srping Boot测试</title>
      <link>http://www.mingaccount.com/2018/05/springboottest/</link>
      <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/05/springboottest/</guid>
      <description>参考官方文档Spring Boot Test</description>
    </item>
    
    <item>
      <title>[译]java9新特性：在接口中用pirvate方法让default(java8接口特性)更简练</title>
      <link>http://www.mingaccount.com/2018/05/%E8%AF%91java9%E6%96%B0%E7%89%B9%E6%80%A7default/</link>
      <pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/05/%E8%AF%91java9%E6%96%B0%E7%89%B9%E6%80%A7default/</guid>
      <description>Java8 带来了许多改变，其中之一就是default修饰的接口方法。 这些方法改变了我们已知的接口，现在我们能够在接口中定义默认实现方法。默认实现方法</description>
    </item>
    
    <item>
      <title>Git push 异常：remote: No anonymous write access</title>
      <link>http://www.mingaccount.com/2018/05/gitpush%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/05/gitpush%E5%BC%82%E5%B8%B8/</guid>
      <description>异常信息 No anonymous write access. Authentication failed for 解决方案 提交的时候设置UserName和email 或者重新设置全局git用户名和邮箱 git config --global user.name &amp;quot;username&amp;quot; git config --global user.email &amp;quot;email&amp;quot;</description>
    </item>
    
    <item>
      <title>Git上传本地项目</title>
      <link>http://www.mingaccount.com/2018/05/git%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/05/git%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE/</guid>
      <description>1.在git上创建仓库，记下clone地址 2.把线上仓库拉到本地 git clone https://github.com/*/*.git 3.把要上传的本地项目文件全部放入本地仓库中 4.把所有文件提交到线上 git</description>
    </item>
    
    <item>
      <title>Git常用命令备忘</title>
      <link>http://www.mingaccount.com/2018/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/05/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/</guid>
      <description>#拉线上代码 git clone https://***.git.com #查看工作区状态 git status -s #撤回上一次的commit内容 git reset --hard HEAD~ #查看当前分支 git branch #切换到对应分支 git checkout dev #删除所有本地未提交内</description>
    </item>
    
    <item>
      <title>Hutool工具包</title>
      <link>http://www.mingaccount.com/2018/05/hutool%E5%B7%A5%E5%85%B7%E5%8C%85/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/05/hutool%E5%B7%A5%E5%85%B7%E5%8C%85/</guid>
      <description>Hutool封装大量java工具类 maven配置： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.4.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; API文档 官方首页</description>
    </item>
    
    <item>
      <title>Spring @Transactional事务失效</title>
      <link>http://www.mingaccount.com/2018/05/spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/05/spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88/</guid>
      <description>问题代码 service方法抛出了异常，但是没有rollback @Transactional public void batchInsert() throws CommonException{} 抛出的自定义异常继承于Exception public class CommonException extends Exception{} 问题原因 @Tra</description>
    </item>
    
    <item>
      <title>[转]quartz cron表达式详解</title>
      <link>http://www.mingaccount.com/2018/05/quartzcron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/05/quartzcron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E8%A7%A3/</guid>
      <description>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式： （1） Seconds Minutes Hours DayofMonth Month DayofWeek Year</description>
    </item>
    
    <item>
      <title>Windows IP DNS批处理</title>
      <link>http://www.mingaccount.com/2018/03/windowsdnsbatch/</link>
      <pubDate>Thu, 22 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/03/windowsdnsbatch/</guid>
      <description>指定ip信息，只需要修改set参数 name是控制面板\网络和 Internet\网络连接中对应的连接名称 @echo off set name=&amp;quot;Wi-Fi&amp;quot; set ipaddress=172.16.61.216 set mask=255.255.255.0 set gateway=172.16.61.254 set dns1=172.16.3.38 set dns2=172.16.3.41 netsh interface ip set address</description>
    </item>
    
    <item>
      <title>判断int和Integer类型是否相等时，空指针异常</title>
      <link>http://www.mingaccount.com/2018/03/%E5%88%A4%E6%96%ADint%E5%92%8Cinteger%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%E6%97%B6%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/03/%E5%88%A4%E6%96%ADint%E5%92%8Cinteger%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%E6%97%B6%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/</guid>
      <description>需要注意在判断int和Integer是否相等时，会先将Integer拆箱，如果Integer为null，会报空指针异常。 因此需要提前处理好I</description>
    </item>
    
    <item>
      <title>字符编码笔记：ASCII、Unicode、UTF-8 和 Base64</title>
      <link>http://www.mingaccount.com/2018/03/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/03/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/</guid>
      <description>1. ASCII码 我们知道，在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就</description>
    </item>
    
    <item>
      <title>Java合理避免空指针</title>
      <link>http://www.mingaccount.com/2018/03/java%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A9%BA%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.mingaccount.com/2018/03/java%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E7%A9%BA%E6%8C%87%E9%92%88/</guid>
      <description>关于如何有效避免空指针，并减少空指针的重复申明。 参考stackoverflow的讨论</description>
    </item>
    
  </channel>
</rss>
