<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jackson on Ming Blog</title>
    <link>https://www.mingaccount.com/tags/jackson/</link>
    <description>Recent content in jackson on Ming Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 12 Aug 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://www.mingaccount.com/tags/jackson/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Maven依赖scope属性</title>
      <link>https://www.mingaccount.com/2017/06/maven-dependency-scope/</link>
      <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/06/maven-dependency-scope/</guid>
      <description>compile This is the default scope, used if none is specified. Compile dependencies are available in all classpaths of a project. Furthermore, those dependencies are propagated to dependent projects. provided This is much like compile, but indicates you expect the JDK or a container to provide the dependency at runtime. For example, when building a web application for the Java Enterprise Edition, you would set the dependency on the Servlet</description>
    </item>
    
    <item>
      <title>Maven命令备忘</title>
      <link>https://www.mingaccount.com/2017/06/maven-common-command/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/06/maven-common-command/</guid>
      <description># 编译项目 mvn compile # 执行项目中的单元测试 # 查找单元测试类的默认规则：**/*Test.java;**/Test*.java;**/*TestCa</description>
    </item>
    
    <item>
      <title>阻止Gson将long类型的字段转为科学计数法</title>
      <link>https://www.mingaccount.com/2017/06/gson-scientific-notation/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/06/gson-scientific-notation/</guid>
      <description>GsonBuilder gsonBuilder = new GsonBuilder(); gsonBuilder.setLongSerializationPolicy( LongSerializationPolicy.STRING ); Gson gson = gsonBuilder.create();</description>
    </item>
    
    <item>
      <title>Spring切面编程</title>
      <link>https://www.mingaccount.com/2017/06/spring-aop/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/06/spring-aop/</guid>
      <description>1.切面编程核心概念 切面编程Aspect-oriented Programming (AOP) AOP只是一个概念，跟Spring是独立关系 最典型的AOP实现框架Aspect</description>
    </item>
    
    <item>
      <title>根据Method获取所有参数名</title>
      <link>https://www.mingaccount.com/2017/06/method-get-all-argnames/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/06/method-get-all-argnames/</guid>
      <description>LocalVariableTableParameterNameDiscoverer discoverer = new LocalVariableTableParameterNameDiscoverer(); discoverer.getParameterNames(method); 详情参考API文档</description>
    </item>
    
    <item>
      <title>JavaString 特殊符号处理工具类</title>
      <link>https://www.mingaccount.com/2017/05/java-string-special-symbol-handler/</link>
      <pubDate>Fri, 26 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/05/java-string-special-symbol-handler/</guid>
      <description>Java, Java Script, HTML, JSON, CSV and XML org.apache.commons.lang3.StringEscapeUtils //使用示例 StringEscapeUtils.escapeCsv(&amp;quot;&amp;quot;); SqtringEscapeUtils.escapeXml(&amp;quot;&amp;quot;); api文档 Regexp 正则表达式转义所有特殊符号 其他 com.google.common.escape.Escapers Escaper build = Escapers.builder().addEscape(&#39;$&#39;, &amp;quot; &amp;quot;).build(); String str = build.escape(&amp;quot;$$$$&amp;quot;); api文档</description>
    </item>
    
    <item>
      <title>正则表达式转义所有特殊符号</title>
      <link>https://www.mingaccount.com/2017/05/regex-escape-all-special-symbol/</link>
      <pubDate>Fri, 26 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/05/regex-escape-all-special-symbol/</guid>
      <description>正则表达式的特殊符号包括 \ $ ( ) * + . [ ] ? ^ { } | - 实现代码(java) public class RegexUtils { private static final String[] SPECIAL_SYMBOLS = new String[]{&amp;quot;\\&amp;quot;, &amp;quot;$&amp;quot;, &amp;quot;(&amp;quot;, &amp;quot;)&amp;quot;, &amp;quot;*&amp;quot;, &amp;quot;+&amp;quot;, &amp;quot;.&amp;quot;, &amp;quot;[&amp;quot;, &amp;quot;]&amp;quot;, &amp;quot;?&amp;quot;, &amp;quot;^&amp;quot;, &amp;quot;{&amp;quot;, &amp;quot;}&amp;quot;, &amp;quot;|&amp;quot;, &amp;quot;-&amp;quot;}; /** * 转义目标正</description>
    </item>
    
    <item>
      <title>Java方法的默认参数</title>
      <link>https://www.mingaccount.com/2017/05/java-method-first-default-param/</link>
      <pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/05/java-method-first-default-param/</guid>
      <description>Java方法如何编译 int add12and13() { return addTwo(12, 13); } 将会编译为： Method int add12and13() 0 aload_0 // Push local variable 0 (this) 1 bipush 12 // Push int constant 12 3 bipush 13 // Push int constant 13 5 invokevirtual #4 // Method Example.addtwo(II)I 8 ireturn // Return int on top of operand stack; // it is the</description>
    </item>
    
    <item>
      <title>pom元素说明</title>
      <link>https://www.mingaccount.com/2017/05/pom-tag/</link>
      <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/05/pom-tag/</guid>
      <description>project pom.xml文件的顶级元素 modelVersion POM使用的对象模型版本。这个模型的版本几乎不更新，作为必要元素的原因是确保稳定性。 groupId 这个元素代表创建这个项</description>
    </item>
    
    <item>
      <title>免费CA机构</title>
      <link>https://www.mingaccount.com/2017/05/ca-free/</link>
      <pubDate>Sat, 13 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/05/ca-free/</guid>
      <description>CA机构颁发HTTPS所需要的TLS证书，一般在域名服务商处就可以购买。也有免费的CA提供商Let&#39;s Encrypt 详情参考Let&amp;rsquo;s Encrypt</description>
    </item>
    
    <item>
      <title>关于mysql和oracle的大小写敏感</title>
      <link>https://www.mingaccount.com/2017/05/mysql-oracle-case-sensitive/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/05/mysql-oracle-case-sensitive/</guid>
      <description>表名 mysql 每一个表至少对应一个服务器文件，而且名字对应，因此表名的大小写敏感跟系统有关系，windows不区分，linux区分 oracle 所有不在双引号里</description>
    </item>
    
    <item>
      <title>Mysql条件对比大小写敏感</title>
      <link>https://www.mingaccount.com/2017/05/mysql-compare-sensitive/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/05/mysql-compare-sensitive/</guid>
      <description>默认情况下mysql的对比条件是大小写不敏感的（latin1_general_ci)，所有不敏感的collate都以_ci结尾。 要让对比条件</description>
    </item>
    
    <item>
      <title>SpringBoot入口类常用注解</title>
      <link>https://www.mingaccount.com/2017/05/spring-boot-entry-anno/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/05/spring-boot-entry-anno/</guid>
      <description>@SpringBootApplication(scanBasePackages=&amp;quot;com.*.*&amp;quot;) @EnableScheduling @EnableTransactionManagement @MapperScan(&amp;quot;com.*.**.*mapper&amp;quot;) @EnableConfigurationProperties({CustomConfiguration.class}) public class Application {} SpringBootApplication Spring注解的扫描路径 EnableScheduling 开启Spring的定时任务 EnableTransactionManagement 开始Spring的事务管理 MapperScan 扫描MyBatis Mapper类的路</description>
    </item>
    
    <item>
      <title>Springboot Jackson全局日期格式处理</title>
      <link>https://www.mingaccount.com/2017/04/jackson-global-date-format/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/04/jackson-global-date-format/</guid>
      <description>通过修改springboot application.properties spring.jackson.date-format=yyyy-MM-dd HH:mm:ss spring.jackson.time-zone=GMT+8</description>
    </item>
    
    <item>
      <title>Jackson使用解析</title>
      <link>https://www.mingaccount.com/2017/04/jackson/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/04/jackson/</guid>
      <description>Jackson简介 Spring在@RequestBody和@ResponseBody中对对象的反序列化和序列化，都是借助Jackson来实现</description>
    </item>
    
    <item>
      <title>修改SpringBoot日志打印时候的标志</title>
      <link>https://www.mingaccount.com/2017/04/modify-spring-boot-banner/</link>
      <pubDate>Sat, 15 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/04/modify-spring-boot-banner/</guid>
      <description>1.新建banner.txt在resources目录下 _/_/_/ _/ _/ _/_/_/ _/ _/ _/_/ _/ _/ _/ _/ _/_/ _/ _/ _/ _/ _/_/_/_/ _/ _/ _/ _/ _/_/_/_/ _/ _/ _/ _/ _/ _/_/ _/ _/ _/_/_/ _/ _/ _/_/_/ _/ _/ _/ _/ 文本图形生</description>
    </item>
    
    <item>
      <title>Spring Application配置文件通用参数</title>
      <link>https://www.mingaccount.com/2017/04/spring-properties-common-key/</link>
      <pubDate>Sun, 02 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/04/spring-properties-common-key/</guid>
      <description>参考Spring官网配置参数 完整列出了所有application配置文件中可用的参数</description>
    </item>
    
    <item>
      <title>Spring自定义配置文件并映射到指定类中</title>
      <link>https://www.mingaccount.com/2017/01/spring-boot-external-properties/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/01/spring-boot-external-properties/</guid>
      <description>新建指定配置类TestConfiguration 该类需要的注解： @Configuration @ConfigurationProperties(prefix=&amp;quot;test&amp;quot;) @PropertySource(&amp;quot;classpath:test.properties&amp;quot;) 同时启动类上需要增加注解： @EnableConfigurationProperties({TestConfiguration.class})</description>
    </item>
    
    <item>
      <title>代理模式</title>
      <link>https://www.mingaccount.com/2017/01/proxy-pattern/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/01/proxy-pattern/</guid>
      <description>简介 为其他对象提供一种代理以控制对这个对象的访问。 类图 代码 import java.util.*; interface Image { public void displayImage(); } //on System A class RealImage implements Image { private String filename; public RealImage(String filename) { this.filename = filename; loadImageFromDisk(); } private void loadImageFromDisk() { System.out.println(&amp;quot;Loading &amp;quot; + filename); } public void displayImage()</description>
    </item>
    
    <item>
      <title>原型模式</title>
      <link>https://www.mingaccount.com/2017/01/prototype-pattern/</link>
      <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2017/01/prototype-pattern/</guid>
      <description>简介 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。[DP] 原型模式要表达的意思就是克隆。当多个对象只有个别属性值不一样时，</description>
    </item>
    
  </channel>
</rss>
