<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Ming Blog</title>
    <link>76C8-6603.github.io/ming-blog/tags/linux/</link>
    <description>Recent content in linux on Ming Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 31 May 2019 19:03:55 +0800</lastBuildDate>
    
        <atom:link href="76C8-6603.github.io/ming-blog/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>怎么给自己的域名指定IP</title>
      <link>76C8-6603.github.io/ming-blog/2020/02/%E6%80%8E%E4%B9%88%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%AE%9Aip/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2020/02/%E6%80%8E%E4%B9%88%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9F%9F%E5%90%8D%E8%AE%BE%E7%BD%AE%E6%8C%87%E5%AE%9Aip/</guid>
      <description>一般来讲直接指定A record就行，这里以NameCheap为例： //@ - used to point a root domain (yourdomain.tld) to the IP address: //在浏览器输入yourdomain.tld想跳</description>
    </item>
    
    <item>
      <title>判断int和Integer类型是否相等时，空指针异常</title>
      <link>76C8-6603.github.io/ming-blog/2020/02/%E5%88%A4%E6%96%ADint%E5%92%8Cinteger%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%E6%97%B6%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2020/02/%E5%88%A4%E6%96%ADint%E5%92%8Cinteger%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%E6%97%B6%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/</guid>
      <description>需要注意在判断int和Integer是否相等时，会先将Integer拆箱，如果Integer为null，会报空指针异常。 因此需要提前处理好I</description>
    </item>
    
    <item>
      <title>Hive同环比实现</title>
      <link>76C8-6603.github.io/ming-blog/2020/02/hive%E5%90%8C%E7%8E%AF%E6%AF%94%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2020/02/hive%E5%90%8C%E7%8E%AF%E6%AF%94%E5%AE%9E%E7%8E%B0/</guid>
      <description>select a.date , a.measure , case when b.measure is null or b.measure=0 then null else concat( cast( cast((if(a.measure is null, 0, a.measure)-if(b.measure is null,0,b.measure))*100/b.measure as decimal(10,2)) as string) ,&#39;%&#39;) end as ratio_column from test_table a left join test_table b on ( to_date(from_unixtime(unix_timestamp(concat(a.date,&#39;&#39;),&#39;yyyyMM&#39;),&#39;yyyy-MM-dd HH:mm:ss&#39;)) = add_months(to_date(from_unixtime(unix_timestamp(concat(b.date,&#39;&#39;),&#39;yyyyMM&#39;),&#39;yyyy-MM-dd HH:mm:ss&#39;)),+1) and 1 = 1 ) 提醒： 1. 第一个join条件的&amp;rsqu</description>
    </item>
    
    <item>
      <title>Hive中的to_date和to_char</title>
      <link>76C8-6603.github.io/ming-blog/2020/02/hive%E4%B8%AD%E7%9A%84to_date%E5%92%8Cto_char/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2020/02/hive%E4%B8%AD%E7%9A%84to_date%E5%92%8Cto_char/</guid>
      <description>hive的日期格式可由String类型保存，只能识别两种格式yyyy-MM-dd和yyyy-MM-dd HH:mm:ss。 只要将日期转为这两种</description>
    </item>
    
    <item>
      <title>像IDEA一样匹配一个WORDS</title>
      <link>76C8-6603.github.io/ming-blog/2020/01/%E5%83%8Fidea%E4%B8%80%E6%A0%B7%E5%8C%B9%E9%85%8D%E4%B8%80%E4%B8%AAwords/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2020/01/%E5%83%8Fidea%E4%B8%80%E6%A0%B7%E5%8C%B9%E9%85%8D%E4%B8%80%E4%B8%AAwords/</guid>
      <description>String.format(&amp;quot;(?&amp;lt;![\\u4E00-\\u9FA5aa-zA-Z0-9_])%s(?![\\u4E00-</description>
    </item>
    
    <item>
      <title>Mysql Explain用法详解</title>
      <link>76C8-6603.github.io/ming-blog/2019/12/mysqlexplain%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/12/mysqlexplain%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</guid>
      <description>根据版本不同，官方文档有详细说明 使用参照文档 查询结果对照文档</description>
    </item>
    
    <item>
      <title>Hadoop安装踩坑</title>
      <link>76C8-6603.github.io/ming-blog/2019/12/hadoop%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/12/hadoop%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91/</guid>
      <description>切记！！！！！ 没有比官网教程更详细，更靠谱的教程！！！！！ 其他的基本都是官网的翻译，但是官网的教程是实时更新的，要是不注意版本，坑根本就踩不</description>
    </item>
    
    <item>
      <title>Hadoop ssh localhost 无密码登录</title>
      <link>76C8-6603.github.io/ming-blog/2019/12/hadoopsshlocalhost%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/12/hadoopsshlocalhost%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/</guid>
      <description>首先确保安装SSH server： sudo apt-get install openssh-server 启动SSH server: sudo service ssh start #检查ssh是否正常启动 ssh localhost 安装后，可以使用如下命令登陆本机： ssh localhost 此时会有SSH</description>
    </item>
    
    <item>
      <title>[转]Mysql表设计注意事项</title>
      <link>76C8-6603.github.io/ming-blog/2019/10/mysql%E8%A1%A8%E8%AE%BE%E8%AE%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/10/mysql%E8%A1%A8%E8%AE%BE%E8%AE%A1%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>作者：孤独烟 链接：https://zhuanlan.zhihu.com/p/73260510 来源：知乎 著作权归作者所有。商业转载请联系作者获</description>
    </item>
    
    <item>
      <title>[转]分库分表如何部署上线</title>
      <link>76C8-6603.github.io/ming-blog/2019/10/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/10/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E4%B8%8A%E7%BA%BF/</guid>
      <description>转自公众号“孤独烟” 引言 我们先来讲一个段子 面试官：“有并发的经验没？” 应聘者：“有一点。” 面试官：“那你们为了处理并发，做了哪些优化？” 应聘</description>
    </item>
    
    <item>
      <title>[转]自增主键用完了该怎么办</title>
      <link>76C8-6603.github.io/ming-blog/2019/10/%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE%E7%94%A8%E5%AE%8C%E4%BA%86%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/10/%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE%E7%94%A8%E5%AE%8C%E4%BA%86%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</guid>
      <description>转自微信公众号“孤独烟” 简单版 我们先明白一点，在mysql中，Int整型的范围如下 我们以无符号整型为例，存储范围为0～4294967295，</description>
    </item>
    
    <item>
      <title>Java读取文件内容文件头有﻿</title>
      <link>76C8-6603.github.io/ming-blog/2019/09/java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/09/java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/</guid>
      <description>&amp;ldquo;\ufeff&amp;quot;是UTF-8 BOM编码的文件头，代表该文件按照什么字节顺序排序 调用java的工具类 [UnicodeIn</description>
    </item>
    
    <item>
      <title>SparkSession.read().csv()无法定位本地文件的问题</title>
      <link>76C8-6603.github.io/ming-blog/2019/09/sparksession.read.csv%E6%97%A0%E6%B3%95%E5%AE%9A%E4%BD%8D%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/09/sparksession.read.csv%E6%97%A0%E6%B3%95%E5%AE%9A%E4%BD%8D%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6/</guid>
      <description>原因是spark有两个文件头 [file://]代表本地 [hdfs://]代表hdfs路径 如果路径没有文件头，spark会将该路径默认添加上&amp;</description>
    </item>
    
    <item>
      <title>Spring @Value注解无法正确赋值问题</title>
      <link>76C8-6603.github.io/ming-blog/2019/09/springvalue%E6%B3%A8%E8%A7%A3%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/09/springvalue%E6%B3%A8%E8%A7%A3%E6%97%A0%E6%B3%95%E6%AD%A3%E7%A1%AE%E8%B5%8B%E5%80%BC%E9%97%AE%E9%A2%98/</guid>
      <description>正确的调用方式为： @Component public class IconProperties { @Value(&amp;quot;${icon.url}&amp;quot;) private String url; } public class test{ @Autowired IconProperties icon; public void test(){ String url = icon.url; } } 这里有三个需要注意的点： 1.@Value赋值是否正确 2.IconProp</description>
    </item>
    
    <item>
      <title>Mysql循环语句，死循环解决办法</title>
      <link>76C8-6603.github.io/ming-blog/2019/08/mysql%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E6%AD%BB%E5%BE%AA%E7%8E%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/08/mysql%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E6%AD%BB%E5%BE%AA%E7%8E%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>delimiter // #定义标识符为双斜杠 drop procedure if exists test; #如果存在test存储过程则删除 create procedure test() #创建无参存储过程,名称为test begin declare i int; #申明变量 set i = 0; #变量赋</description>
    </item>
    
    <item>
      <title>[转]Spring中使用@Autowired注解静态实例对象</title>
      <link>76C8-6603.github.io/ming-blog/2019/07/spring%E4%B8%AD%E4%BD%BF%E7%94%A8autowired%E6%B3%A8%E8%A7%A3%E9%9D%99%E6%80%81%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/07/spring%E4%B8%AD%E4%BD%BF%E7%94%A8autowired%E6%B3%A8%E8%A7%A3%E9%9D%99%E6%80%81%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1/</guid>
      <description>问题 最近项目小组在重新规划工程的业务缓存，其中涉及到部分代码重构，过程中发现有些工具类中的静态方法需要依赖别的对象实例（该实例已配置在xml</description>
    </item>
    
    <item>
      <title>Mysql 日期TIMESTAMP类型插入，与系统时间有差异</title>
      <link>76C8-6603.github.io/ming-blog/2019/07/mysql%E6%97%A5%E6%9C%9Ftimestamp%E7%B1%BB%E5%9E%8B%E6%8F%92%E5%85%A5%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%9C%89%E5%B7%AE%E5%BC%82/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/07/mysql%E6%97%A5%E6%9C%9Ftimestamp%E7%B1%BB%E5%9E%8B%E6%8F%92%E5%85%A5%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E6%9C%89%E5%B7%AE%E5%BC%82/</guid>
      <description>1.数据库url后追加 &amp;amp;serverTimezone=Asia/Shanghai 2.修改数据库默认时区 show variables like &amp;quot;%time_zone%&amp;quot;;#查询当前时区 set global time_zone = &#39;+8:00&#39;; #修改mysql</description>
    </item>
    
    <item>
      <title>Java加密类Cipher的使用</title>
      <link>76C8-6603.github.io/ming-blog/2019/07/java%E5%8A%A0%E5%AF%86%E7%B1%BBcipher%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/07/java%E5%8A%A0%E5%AF%86%E7%B1%BBcipher%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>public class EncryptUtils { private static final String SECRET_KEY_1 = &amp;quot;YIORGA4dBYp6y7u8&amp;quot;; private static final String SECRET_KEY_2 = &amp;quot;C6B8r5y7u7Uh37Sy&amp;quot;; private IvParameterSpec ivParameterSpec; private SecretKeySpec secretKeySpec; private Cipher cipher; public EncryptUtils() throws UnsupportedEncodingException, NoSuchPaddingException, NoSuchAlgorithmException { ivParameterSpec = new IvParameterSpec(SECRET_KEY_1.getBytes(&amp;quot;UTF-8&amp;quot;)); secretKeySpec = new SecretKeySpec(SECRET_KEY_2.getBytes(&amp;quot;UTF-8&amp;quot;), &amp;quot;AES&amp;quot;); cipher = Cipher.getInstance(&amp;quot;AES/CBC/PKCS5PADDING&amp;quot;); } /** * Encrypt the string with this internal algorithm. * * @param toBeEncrypt string object to be encrypt. * @return returns encrypted string.</description>
    </item>
    
    <item>
      <title>Mysql批量更新</title>
      <link>76C8-6603.github.io/ming-blog/2019/07/mysql%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/07/mysql%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0/</guid>
      <description>多个where条件，每个条件对应的更新值不同，需要mysql批量更新 UPDATE test_table SET test_target = test_id CASE WHEN &amp;quot;123&amp;quot; THEN &amp;quot;456&amp;quot; WHEN &amp;quot;789&amp;quot; THEN &amp;quot;101&amp;quot; END WHERE test_id in [&#39;123&#39;,&#39;789&#39;] 但是在程序中，直接写常量的情况太</description>
    </item>
    
    <item>
      <title>spring boot configuration annotation processor not found in classpath</title>
      <link>76C8-6603.github.io/ming-blog/2019/07/springbootconfigurationexception/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>76C8-6603.github.io/ming-blog/2019/07/springbootconfigurationexception/</guid>
      <description>配置有@ConfigurationProperties 注解的类，有如下提示 spring boot configuration annotation processor not found in classpath pom追加配置如下依赖即可 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-configuration-processor&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt;</description>
    </item>
    
  </channel>
</rss>
