<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on Ming Blog</title>
    <link>https://www.mingaccount.com/tags/scala/</link>
    <description>Recent content in scala on Ming Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 24 Feb 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://www.mingaccount.com/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>h2 url参数</title>
      <link>https://www.mingaccount.com/2018/12/h2-url/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/12/h2-url/</guid>
      <description>参考h2 feature</description>
    </item>
    
    <item>
      <title>Junit5常用注解</title>
      <link>https://www.mingaccount.com/2018/11/junit5-common-annotation/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/11/junit5-common-annotation/</guid>
      <description>@BeforeAll @BeforeEach @AfterAll @AfterEach @DisplayName 自定义的展示名称 @IndicativeSentencesGeneration(separator = &amp;quot; -&amp;gt; &amp;ldquo;, generator = DisplayNameGenerator.ReplaceUnderscores.class) 更改生成测试名称规则，根据类名和方法名生成，并可以指定替换策略，比如上面的替换下划线为空格 @Disabled 屏蔽整</description>
    </item>
    
    <item>
      <title>Maven Plugins</title>
      <link>https://www.mingaccount.com/2018/11/maven-plugin/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/11/maven-plugin/</guid>
      <description>参照官方文档，有详细说明和使用实例 Maven plugins</description>
    </item>
    
    <item>
      <title>Spring boot h2集成数据库进行测试</title>
      <link>https://www.mingaccount.com/2018/10/spring-boot-h2-test/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/10/spring-boot-h2-test/</guid>
      <description>背景 使用AutoConfigure*或者SpringBootTest进行测试的时候，如果不手动设置@AutoConfigureTestDat</description>
    </item>
    
    <item>
      <title>删除视图失败，提示有其他视图依赖于该视图</title>
      <link>https://www.mingaccount.com/2018/10/h2-drop-exception/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/10/h2-drop-exception/</guid>
      <description>问题背景 DROP VIEW temp_view; 报错信息： Can&#39;t drop temp_view,because *** depend on it 解决方案 DROP VIEW temp_view CASCADE ; 该sql会删除所有依赖的视图</description>
    </item>
    
    <item>
      <title>hive 执行sql时报错out of sequence</title>
      <link>https://www.mingaccount.com/2018/09/hive-out-of-sequence/</link>
      <pubDate>Sun, 23 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/09/hive-out-of-sequence/</guid>
      <description>问题背景 错误日志： org.apache.thrift.TApplicationException: [?] : out of sequence response 问题原因 hive连接在连接池中，同时两个线程去获取并执行，两个都有close操作。 参考hive jira</description>
    </item>
    
    <item>
      <title>SpringBoot Mybatis配置多数据源</title>
      <link>https://www.mingaccount.com/2018/09/spring-boot-mybatis-multi-source/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/09/spring-boot-mybatis-multi-source/</guid>
      <description>@Configuration @MapperScan(basePackages = MysqlDatasourceConfig.PACKAGE, sqlSessionFactoryRef = &amp;quot;mysqlSessionFactory&amp;quot;) public class MysqlDatasourceConfig { public static final String PACKAGE = &amp;quot;com.ming.mapper.mysql1&amp;quot;; public static final String MAPPER_LOCATION = &amp;quot;classpath:mapper/mysql1/*.xml&amp;quot;; @Primary @Bean(name = &amp;quot;mysqlDatasource&amp;quot;) @ConfigurationProperties(&amp;quot;spring.datasource.druid.mysql1&amp;quot;) public DataSource mysqlDataSource(){ return DruidDataSourceBuilder.create().build(); } @Bean(name = &amp;quot;mysqlTransactionManager&amp;quot;) @Primary public DataSourceTransactionManager mysqlTransactionManager() { return new DataSourceTransactionManager(mysqlDataSource()); } @Bean(name = &amp;quot;mysqlSessionFactory&amp;quot;) @Primary public SqlSessionFactory mysqlSessionFactory(@Qualifier(&amp;quot;mysqlDatasource&amp;quot;) DataSource dataSource) throws Exception { final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean(); sessionFactory.setDataSource(dataSource); sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(MysqlDatasourceConfig.MAPPER_LOCATION)); return</description>
    </item>
    
    <item>
      <title>SpringBoot Ehcache集成</title>
      <link>https://www.mingaccount.com/2018/09/spring-boot-ehcache/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/09/spring-boot-ehcache/</guid>
      <description>ehcache.xml &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;ehcache xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:noNamespaceSchemaLocation=&amp;quot;http://ehcache.org/ehcache.xsd&amp;quot;&amp;gt; &amp;lt;defaultCache maxElementsInMemory=&amp;quot;10000&amp;quot; eternal=&amp;quot;false&amp;quot; timeToIdleSeconds=&amp;quot;3600&amp;quot; timeToLiveSeconds=&amp;quot;0&amp;quot; overflowToDisk=&amp;quot;false&amp;quot; diskPersistent=&amp;quot;false&amp;quot; diskExpiryThreadIntervalSeconds=&amp;quot;120&amp;quot; /&amp;gt; &amp;lt;cache name=&amp;quot;myCache&amp;quot; maxEntriesLocalHeap=&amp;quot;2000&amp;quot; eternal=&amp;quot;false&amp;quot; timeToIdleSeconds=&amp;quot;3600&amp;quot; timeToLiveSeconds=&amp;quot;0&amp;quot; overflowToDisk=&amp;quot;false&amp;quot; statistics=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/ehcache&amp;gt; 属性简介： name：缓存名称。 maxElementsInMemory：缓存最大数目 maxE</description>
    </item>
    
    <item>
      <title>SpringBoot Redis集成</title>
      <link>https://www.mingaccount.com/2018/09/spring-boot-redis/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/09/spring-boot-redis/</guid>
      <description>application.yml spring: redis: database: 0 host: localhost prot: 6379 pool: max-active: 8 max-wait: -1 max-idle: 8 min-idle: 0 timeout: 0 更多配置参考Spring官网配置参数 RedisConfig @Configuration @EnableCaching public class RedisConfig extends CachingConfigurerSupport { @Bean @Override public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) { return RedisCacheManager.create(redisConnectionFactory); } }</description>
    </item>
    
    <item>
      <title>Spring缓存集成</title>
      <link>https://www.mingaccount.com/2018/09/spring-cache/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/09/spring-cache/</guid>
      <description>1.了解缓存概念 缓存和缓冲(Cache vs Buffer) 缓存和缓冲一般来说都是交替使用的，需要知道的是他们是两个完全不同的东西。 buffer(缓冲)是用在</description>
    </item>
    
    <item>
      <title>大型网站架构演化概论</title>
      <link>https://www.mingaccount.com/2018/09/big-web-bala-bala/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/09/big-web-bala-bala/</guid>
      <description>1.大型网站的特点： 相比传统企业应用系统，大型互联网应用系统有以下特点： 高并发、大流量：需要面对高并发用户，大流量访问。 高可用：系统需要7*</description>
    </item>
    
    <item>
      <title>[译]Java8：循环与函数式编程</title>
      <link>https://www.mingaccount.com/2018/08/java8-for-functional/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/08/java8-for-functional/</guid>
      <description>Java8函数式编程的加入彻底改变了游戏规则。对Java开发者来说这是一个全新的世界，我们也需要做出相应的改变。 在这篇文章中我们将找寻传统循</description>
    </item>
    
    <item>
      <title>[译]Java8的函数式接口</title>
      <link>https://www.mingaccount.com/2018/08/java8-lamda-interface/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/08/java8-lamda-interface/</guid>
      <description>Java8引入了 java.util.function 包，他包含了函数式接口，具体的描述在以下api说明文档中： 函数式接口为lambda表达式和方法引用提供目标类型。每个函数式</description>
    </item>
    
    <item>
      <title>Spring boot 文件路径读取异常</title>
      <link>https://www.mingaccount.com/2018/08/spring-boot-get-file-path/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/08/spring-boot-get-file-path/</guid>
      <description>在开发代码中，有一段需要获取resources目录下的一个配置文件（这里写作test.xml）。 这段代码在ide中没有任何问题，但是一打成j</description>
    </item>
    
    <item>
      <title>Linux常用命令备忘</title>
      <link>https://www.mingaccount.com/2018/08/linux-common-command/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/08/linux-common-command/</guid>
      <description>cd - #查看上一次所在的目录 cat /etc/hosts #文档查看 ls #查看当前目录下所有文件 pwd #查看当前目录的绝对路径 ll #查看目录下文件的详细信息，包括权限属组等信息</description>
    </item>
    
    <item>
      <title>vim命令备忘</title>
      <link>https://www.mingaccount.com/2018/08/vim-common-command/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/08/vim-common-command/</guid>
      <description>vi /etc/hosts i 修改模式 esc 退出修改 :q 正常退出(文件没有修改 :q! 不保存退出 :wq 保存退出 G 跳到末尾行 dd 删除当前行 gg 跳到第一行第一个字符 $ 跳到当前行的最后一个字</description>
    </item>
    
    <item>
      <title>SpringBoot定时任务</title>
      <link>https://www.mingaccount.com/2018/08/spring-boot-schedule/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/08/spring-boot-schedule/</guid>
      <description>开启定时任务 @Configuration @EnableScheduling @ComponentScan(basePackages=&amp;quot;com.myco.tasks&amp;quot;) public class AppConfig { } 如果需要对定时任务的生命周期有其他的操作，可以实现接口SchedulingConfigurer @Configuration @EnableScheduling public class AppConfig implements SchedulingConfigurer { @Override</description>
    </item>
    
    <item>
      <title>大浏览量系统的静态化架构设计</title>
      <link>https://www.mingaccount.com/2018/08/static-sturcture-design/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/08/static-sturcture-design/</guid>
      <description>本篇文章着重整理什么是静态化系统架构，以及静态化架构的几种方案。 首先先贴一个淘宝系统升级的历程(09~13)： 09年，系统拆分，静态文件合并</description>
    </item>
    
    <item>
      <title>请求参数中的&#43;号为什么会丢失,如何保证参数完整</title>
      <link>https://www.mingaccount.com/2018/08/request-param-lost-add-symbol/</link>
      <pubDate>Tue, 07 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/08/request-param-lost-add-symbol/</guid>
      <description>最近在开发中碰见一个问题，后端代码调用接口，在请求端参数没有任何问题，但是当接口接收到参数时，其中的加号全部变为了空格。 在查阅资料后发现是U</description>
    </item>
    
    <item>
      <title>Maven package完整依赖jar包</title>
      <link>https://www.mingaccount.com/2018/07/maven-package-complete-dependency/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.mingaccount.com/2018/07/maven-package-complete-dependency/</guid>
      <description>maven package生成的jar包默认是没有项目依赖的 需要导出的jar包包含项目所有的依赖，需要配置pom： &amp;lt;build&amp;gt; &amp;lt;finalName&amp;gt;yourApp&amp;lt;/finalName&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;maven-shade-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;shadedArtifactAttached&amp;gt;true&amp;lt;/shadedArtifactAttached&amp;gt; &amp;lt;shadedClassifierName&amp;gt;jar-with-dependencies&amp;lt;/shadedClassifierName&amp;gt; &amp;lt;!-- Any name that makes sense --&amp;gt; &amp;lt;outputDirectory&amp;gt;../output/jar-with-dependencies&amp;lt;/outputDirectory&amp;gt; &amp;lt;/configuration&amp;gt;</description>
    </item>
    
  </channel>
</rss>
